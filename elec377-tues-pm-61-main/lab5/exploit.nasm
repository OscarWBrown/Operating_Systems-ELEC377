bits 64
  ; find out where we are
start:   
  xor rax, rax              ; Clear RAX register
  push rax                  ; Push null terminator onto the stack
  mov rdi, '/bin/env'       ; Set RDI register to the path '/bin/env'
  push rdi                  ; Push the address of the path onto the stack

  mov rdi, rsp              ; Set RDI to the address of the path string on the stack

  push rax                  ; Push null terminator onto the stack
  push rdi                  ; Push the address of the path onto the stack

  mov rsi, rsp              ; Set RSI to the address of the argument array on the stack

  xor rdx, rdx              ; Clear RDX register
  mov dx, 0x7fff            ; Set the length of the argument array
  shl rdx, 32               ; Shift the length to the upper 32 bits
  mov ecx, 0xf7fbe6ff        ; Set the flag for the stack layout
  xor cl, cl                ; Clear the lower 8 bits of ECX
  or rdx, rcx               ; Combine RDX and RCX to get the final stack layout
  mov rdx, [rdx]            ; Set RDX to the actual stack address

  xor rax, rax              ; Clear RAX register
  mov al, 0x3B              ; Set RAX to the syscall number for execve
  syscall                   ; Perform the system call

  mov rdi, rax              ; Move the return value (child process PID) to RDI
  xor rax, rax              ; Clear RAX register
  mov al, 0x3c              ; Set RAX to the syscall number for exit
  syscall                   ; Perform the system call to exit the program

  dq 0xffffffffffffffff     ; Dummy data (not executed)
  dq 0xffffffffffffffff     ; Dummy data (not executed)
  dq 0xffffffffffffffff     ; Dummy data (not executed)
  dq 0xffffffffffffffff     ; Dummy data (not executed)
  dq 0xffffffffffffffff     ; Dummy data (not executed)

end:      
  dd end-start               ; Calculate and store the size of the code section
  ; your code starts here
